C51 COMPILER V9.00   HAL_DISPLAY                                                           09/20/2019 21:05:40 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE HAL_DISPLAY
OBJECT MODULE PLACED IN ..\output\hal_display.obj
COMPILER INVOKED BY: D:\Keil\C51\C51\BIN\C51.EXE ..\source\hal\hal_display.c OPTIMIZE(2,SPEED) BROWSE INCDIR(..\source\a
                    -pp;..\source\driver;..\source\hal) DEBUG OBJECTEXTEND PRINT(.\hal_display.lst) OBJECT(..\output\hal_display.obj)

line level    source

   1          
   2          
   3          #include "hal_display.h"
   4          
   5          
   6          static void Hal_DisplayCalendar(const Calendar_t * pCalendar);
   7          
   8          
   9          
  10          void Hal_DisplayInit(void)
  11          {
  12   1              Drv_LcdInit();
  13   1      }
  14          
  15          static void Hal_DisplayCalendar(const Calendar_t * pCalendar)
  16          {
  17   1              uint8_t str[11] = {0};
  18   1              
  19   1              str[0] = (uint8_t)'2';
  20   1              str[1] = (uint8_t)'0';
  21   1              str[2] = (uint8_t)(((pCalendar->year >> 4U) & 0x000FU) + (uint8_t)'0');//“年”高位数字转换为 ASCII 码
  22   1              str[3] = (uint8_t)((pCalendar->year & 0x000FU) + (uint8_t)'0');//“年”低位数字转换为 ASCII 码
  23   1              str[4] = (uint8_t)'-'; //添加日期分隔符
  24   1              str[5] = (uint8_t)((pCalendar->mon >> 4U) + (uint8_t)'0'); //“月”
  25   1              str[6] = (uint8_t)((pCalendar->mon & 0x0FU) + (uint8_t)'0');
  26   1              str[7] = (uint8_t)'-';
  27   1              str[8] = (uint8_t)((pCalendar->day >> 4U) + (uint8_t)'0'); //“日”
  28   1              str[9] = (uint8_t)((pCalendar->day & 0x0FU) + (uint8_t)'0');
  29   1              str[10] = (uint8_t)'\0';
  30   1              Hal_DisplayStr(0, 0, str); //显示到液晶的第一行
  31   1      
  32   1              str[0] = (uint8_t)((pCalendar->week & 0x0FU) + (uint8_t)'0'); //“星期”
  33   1              str[1] = (uint8_t)'\0';
  34   1              Hal_DisplayStr(11, 0, "week");
  35   1              Hal_DisplayStr(15, 0, str); //显示到液晶的第一行
  36   1      
  37   1              str[0] = (uint8_t)((pCalendar->hour >> 4U) + (uint8_t)'0'); //“时”
  38   1              str[1] = (uint8_t)((pCalendar->hour & 0x0FU) + (uint8_t)'0');
  39   1              str[2] = (uint8_t)':'; //添加时间分隔符
  40   1              str[3] = (uint8_t)((pCalendar->min >> 4U) + (uint8_t)'0'); //“分”
  41   1              str[4] = (uint8_t)((pCalendar->min & 0x0FU) + (uint8_t)'0');
  42   1              str[5] = (uint8_t)':';
  43   1              str[6] = (uint8_t)((pCalendar->sec >> 4U) + (uint8_t)'0'); //“秒”
  44   1              str[7] = (uint8_t)((pCalendar->sec & 0x0FU) + (uint8_t)'0');
  45   1              str[8] = (uint8_t)'\0';
  46   1              Hal_DisplayStr(4, 1, str); //显示到液晶的第二行
  47   1      }
  48          
  49          void Hal_FlashCalendar(void)
  50          {
  51   1              static uint8_t secBak = 0;
  52   1              Calendar_t tCalendar = {0};
  53   1      
  54   1              Hal_GetSysTime(&tCalendar);
C51 COMPILER V9.00   HAL_DISPLAY                                                           09/20/2019 21:05:40 PAGE 2   

  55   1      
  56   1              if (secBak != tCalendar.sec)
  57   1              {
  58   2                      secBak = tCalendar.sec;
  59   2                      Hal_DisplayCalendar(&tCalendar);
  60   2              }
  61   1      }
  62          
  63          
  64          void Hal_DisplayStr(uint8_t x, uint8_t y, const uint8_t *str)
  65          {
  66   1              uint8_t addr = 0;
  67   1              //由输入的显示坐标计算显示 RAM 的地址
  68   1              if (y == 0)
  69   1              {
  70   2                      addr = 0x00 + x; //第一行字符地址从 0x00 起始
  71   2              }
  72   1              else
  73   1              {
  74   2                      addr = 0x40 + x; //第二行字符地址从 0x40 起始
  75   2              }
  76   1              //由起始显示 RAM 地址连续写入字符串
  77   1              Drv_LcdWriteCmd(addr | 0x80U); //写入起始地址
  78   1              while (*str != '\0') //连续写入字符串数据，直到检测到结束符
  79   1              {
  80   2                      Drv_LcdWriteDat(*str);
  81   2                      str++;
  82   2              }
  83   1      }
  84          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    604    ----
   CONSTANT SIZE    =     24    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      1      28
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
