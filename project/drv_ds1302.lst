C51 COMPILER V9.00   DRV_DS1302                                                            04/27/2019 10:35:07 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE DRV_DS1302
OBJECT MODULE PLACED IN ..\output\drv_ds1302.obj
COMPILER INVOKED BY: D:\Keil\C51\C51\BIN\C51.EXE ..\source\complex_driver\drv_ds1302.c BROWSE INCDIR(..\source\app;..\so
                    -urce\complex_driver;..\source\driver;..\source\hal) DEBUG OBJECTEXTEND PRINT(.\drv_ds1302.lst) OBJECT(..\output\drv_ds13
                    -02.obj)

line level    source

   1          
   2          
   3          #include "drv_ds1302.h"
   4          
   5          static const uint8_t code initTimerDat[] = {0x00,0x30,0x12,0x20,0x10,0x07,0x13,0x00};
   6          
   7          static void DrvDs1302Init(void);
   8          static void DrvDs1302ByteWrite(uint8_t dat);
   9          static uint8_t DrvDs1302ByteRead(void);
  10          static void DrvDs1302WriteReg(uint8_t reg, uint8_t dat);
  11          static uint8_t DrvDs1302ReadReg(uint8_t reg);
  12          static void DrvDs1302BurstWrite(uint8_t dat[]);
  13          static void DrvDs1302BurstRead(uint8_t dat[]);
  14          
  15          D_SOFTWARE_INTERFACE drvDs1302Interface_t code drvDs1302Interface = {
  16                  DrvDs1302Init,
  17                  DrvDs1302BurstWrite,
  18                  DrvDs1302BurstRead
  19          };
  20          
  21          static void DrvDs1302Init(void)
  22          {
  23   1              uint8_t dat = 0;
  24   1              
  25   1              drvGpioInterface.NameOut(EN_DS1302_CE, 0);
  26   1              drvGpioInterface.NameOut(EN_DS1302_CK, 0);
  27   1              dat = DrvDs1302ReadReg(0);
  28   1              if ( (dat & 0x80) != 0 )
  29   1              {
  30   2                      DrvDs1302WriteReg(7, 0x00);/* undo write protect */
  31   2                      DrvDs1302BurstWrite(initTimerDat);
  32   2              }
  33   1      }
  34          
  35          static void DrvDs1302ByteWrite(uint8_t dat)
  36          {
  37   1              uint8_t mask = 0;
  38   1      
  39   1              for (mask = 0x01; mask!=0; mask <<= 1)
  40   1              {
  41   2                      if ( (mask&dat) != 0 )
  42   2                      {
  43   3                              drvGpioInterface.NameOut(EN_DS1302_IO, 1);
  44   3                      }
  45   2                      else
  46   2                      {
  47   3                              drvGpioInterface.NameOut(EN_DS1302_IO, 0);
  48   3                      }
  49   2                      drvGpioInterface.NameOut(EN_DS1302_CK, 1);
  50   2                      drvGpioInterface.NameOut(EN_DS1302_CK, 0);
  51   2              }
  52   1              
  53   1              drvGpioInterface.NameOut(EN_DS1302_IO, 1);      //ÊÍ·ÅIO½Å
C51 COMPILER V9.00   DRV_DS1302                                                            04/27/2019 10:35:07 PAGE 2   

  54   1      }
  55          
  56          static uint8_t DrvDs1302ByteRead(void)
  57          {
  58   1              uint8_t mask = 0;
  59   1              uint8_t dat = 0;
  60   1      
  61   1              for (mask = 0x01; mask != 0; mask <<= 1)
  62   1              {
  63   2                      if (drvGpioInterface.NameIn(EN_DS1302_IO) != 0)
  64   2                      {
  65   3                              dat |= mask;
  66   3                      }
  67   2                      drvGpioInterface.NameOut(EN_DS1302_CK, 1);
  68   2                      drvGpioInterface.NameOut(EN_DS1302_CK, 0);
  69   2              }
  70   1      
  71   1              return dat;
  72   1      }
  73          
  74          static void DrvDs1302WriteReg(uint8_t reg, uint8_t dat)
  75          {
  76   1              drvGpioInterface.NameOut(EN_DS1302_CE, 1);
  77   1              DrvDs1302ByteWrite((reg<<1) | 0x80);            //·¢ËÍÐ´Ö¸Áî
  78   1              DrvDs1302ByteWrite(dat);
  79   1              drvGpioInterface.NameOut(EN_DS1302_CE, 0);
  80   1      }
  81          
  82          static uint8_t DrvDs1302ReadReg(uint8_t reg)
  83          {
  84   1              uint8_t dat = 0;
  85   1              
  86   1              drvGpioInterface.NameOut(EN_DS1302_CE, 1);
  87   1              DrvDs1302ByteWrite((reg<<1) | 0x81);            //·¢ËÍ¶ÁÖ¸Áî
  88   1              dat = DrvDs1302ByteRead();
  89   1              drvGpioInterface.NameOut(EN_DS1302_CE, 0);
  90   1              
  91   1              return dat;     
  92   1      }
  93          
  94          static void DrvDs1302BurstWrite(uint8_t dat[])
  95          {
  96   1              uint8_t i = 0;
  97   1      
  98   1              drvGpioInterface.NameOut(EN_DS1302_CE, 1);
  99   1              DrvDs1302ByteWrite(0xBE);               //·¢ËÍÍ»·¢Ð´¼Ä´æÆ÷Ö¸Áî
 100   1              
 101   1              for (i = 0; i < 8; i++)
 102   1              {
 103   2                      DrvDs1302ByteWrite(dat[i]);
 104   2              }
 105   1              
 106   1              drvGpioInterface.NameOut(EN_DS1302_CE, 0);
 107   1      }
 108          
 109          static void DrvDs1302BurstRead(uint8_t dat[])
 110          {
 111   1              uint8_t i = 0;
 112   1              
 113   1              drvGpioInterface.NameOut(EN_DS1302_CE, 1);
 114   1              DrvDs1302ByteWrite(0xBF);
 115   1              
C51 COMPILER V9.00   DRV_DS1302                                                            04/27/2019 10:35:07 PAGE 3   

 116   1              for (i=0;i<8;i++)
 117   1              {
 118   2                      dat[i] = DrvDs1302ByteRead();
 119   2              }
 120   1              
 121   1              drvGpioInterface.NameOut(EN_DS1302_CE, 0);
 122   1      }
 123          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    578    ----
   CONSTANT SIZE    =     17    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      16
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
